name: Build and Test

on:
  push:
    branches:
      - dev
    paths:
      - 'dependency/**'
      - 'projects/**'
      - 'src/**'
  pull_request:
    branches:
      - dev

jobs:
  build_windows:
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Build
        run: |
          cd projects/CMake
          cmake -S . -B ./build_x86    -A Win32 -DCMAKE_C_STANDARD=11 -DCMAKE_C_STANDARD_REQUIRED=ON
          cmake -S . -B ./build_x86_64 -A x64   -DCMAKE_C_STANDARD=11 -DCMAKE_C_STANDARD_REQUIRED=ON
          cmake --build ./build_x86 --config Release
          cmake --build ./build_x86_64 --config Release

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: VorbisPluginWindowsArtifacts
          path: |
            out/Release/Plugins/Windows/x86/VorbisPlugin.dll
            out/Release/Plugins/Windows/x86_64/VorbisPlugin.dll

  build_android:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code (with LFS)
        uses: actions/checkout@v4
        with:
          submodules: recursive
          lfs: true

      - name: Git LFS pull
        run: |
          git lfs install
          git lfs pull

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Setup CMake
        uses: jwlawson/actions-setup-cmake@v1.14
        with:
          cmake-version: '3.25.2'

      - name: Set execution permissions for gradlew
        run: chmod +x projects/Android/gradlew

      - name: Build Gradle project
        run: |
          echo $ANDROID_NDK_HOME
          result=$(find $ANDROID_NDK_HOME -name aarch64-linux-android-strip)
          echo $result
          cd projects/Android
          ./gradlew -PANDROID_16K_PAGE=ON assembleRelease
          tree ../../out

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: VorbisPluginAndroidArtifacts
          path: |
            out/RelWithDebInfo/Plugins/Android/arm64-v8a/libVorbisPlugin.so
            out/RelWithDebInfo/Plugins/Android/armeabi-v7a/libVorbisPlugin.so
            out/RelWithDebInfo/Plugins/Android/x86/libVorbisPlugin.so
            out/RelWithDebInfo/Plugins/Android/x86_64/libVorbisPlugin.so

  build_macos:
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup CMake
        uses: jwlawson/actions-setup-cmake@v1.14
        with:
          cmake-version: '3.29.6'

      - name: Build
        shell: bash
        run: |
          set -euxo pipefail
          cd projects/CMake

          cmake -S . -B ./buildOSX -G Xcode -DVORBIS_OSX=1 -DCMAKE_OSX_ARCHITECTURES="x86_64;arm64"
          cmake --build ./buildOSX --config Release

          cmake -S . -B ./buildOSX_arm64 -G Xcode -DVORBIS_OSX=1 -DCMAKE_OSX_ARCHITECTURES=arm64
          cmake --build ./buildOSX_arm64 --config Release

          cmake -S . -B ./buildOSX_x86_64 -G Xcode -DVORBIS_OSX=1 -DCMAKE_OSX_ARCHITECTURES=x86_64
          cmake --build ./buildOSX_x86_64 --config Release

          ARM64_DYLIB="$(find ./buildOSX_arm64 -type f -name libVorbisPlugin.dylib | head -n1)"
          X64_DYLIB="$(find ./buildOSX_x86_64 -type f -name libVorbisPlugin.dylib | head -n1)"

          mkdir -p ../../out/Release/Plugins/Darwin/arm64
          mkdir -p ../../out/Release/Plugins/Darwin/x86_64

          cp "$ARM64_DYLIB" ../../out/Release/Plugins/Darwin/arm64/
          cp "$X64_DYLIB" ../../out/Release/Plugins/Darwin/x86_64/

          lipo -create "$ARM64_DYLIB" "$X64_DYLIB" -output ../../out/Release/Plugins/Darwin/libVorbisPlugin.dylib

          brew install tree
          tree ../../out

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: VorbisPluginMacOSArtifacts
          path: |
            out/Release/Plugins/Darwin/arm64/libVorbisPlugin.dylib
            out/Release/Plugins/Darwin/x86_64/libVorbisPlugin.dylib
            out/Release/Plugins/Darwin/libVorbisPlugin.dylib
          if-no-files-found: error

  build_ios:
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup CMake
        uses: jwlawson/actions-setup-cmake@v1.14
        with:
          cmake-version: '3.29.6'

      - name: Build
        run: |
          cd projects/CMake
          cmake -S . -B ./buildIOS -G Xcode -DCMAKE_TOOLCHAIN_FILE=../../dependency/cmake-ios-toolchain/ios.toolchain.cmake -DPLATFORM=OS64 -DVORBIS_IOS=1
          cmake --build ./buildIOS --config Release --target VorbisPlugin
          brew install tree
          tree ../../out

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: VorbisPluginIOSArtifacts
          path: |
            out/Release/Plugins/iOS/*/libVorbisPlugin.a
            out/Release/Plugins/iOS/*/libvorbis.a
            out/Release/Plugins/iOS/*/libvorbisfile.a
            out/Release/Plugins/iOS/*/libvorbisenc.a
            out/Release/Plugins/iOS/*/libogg.a

  build_linux:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake tree

      - name: Build
        run: |
          cd projects/CMake
          cmake -S . -B ./buildLinux -G "Unix Makefiles" -DVORBIS_LINUX=1
          cmake --build ./buildLinux --config Release
          tree ../../out

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: VorbisPluginLinuxArtifacts
          path: |
            out/Plugins/Linux/x86_64/libVorbisPlugin.so

  build_webgl:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up Emscripten 3.1.39
        uses: mymindstorm/setup-emsdk@v14
        with:
          version: 3.1.39

      - name: Verify Emscripten installation
        run: emcc -v || true

      - name: Build WebGL static libs (.a)
        run: |
          cd projects/CMake
          emcmake cmake -S . -B ./buildWebGL \
            -DVORBIS_WEB_ASSEMBLY=1 \
            -DBUILD_SHARED_LIBS=OFF \
            -DCMAKE_BUILD_TYPE=Release \
            -DBUILD_TESTING=OFF
          cmake --build ./buildWebGL --config Release
          cd ../..
          ls -al out/Plugins/WebGL || true
          emar t out/Plugins/WebGL/libVorbisPlugin.a || true
          emar t out/Plugins/WebGL/libvorbis.a || true
          emar t out/Plugins/WebGL/libvorbisfile.a || true
          emar t out/Plugins/WebGL/libvorbisenc.a || true
          emar t out/Plugins/WebGL/libogg.a || true

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: VorbisPluginWebGLArtifacts
          path: |
            out/Plugins/WebGL/libVorbisPlugin.a
            out/Plugins/WebGL/libvorbis.a
            out/Plugins/WebGL/libvorbisfile.a
            out/Plugins/WebGL/libvorbisenc.a
            out/Plugins/WebGL/libogg.a

  commit_and_push_native_libraries:
    needs: [build_windows, build_android, build_macos, build_ios, build_linux, build_webgl]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive

      - name: Ensure dev branch exists
        run: |
          if git ls-remote --exit-code origin dev >/dev/null 2>&1; then
            git checkout dev
          elif git show-ref --verify --quiet refs/heads/dev; then
            git checkout dev
          else
            git checkout -b dev
          fi

      - name: Download artifacts windows
        uses: actions/download-artifact@v4
        with:
          name: VorbisPluginWindowsArtifacts
          path: out/Plugins/Windows

      - name: Download artifacts android
        uses: actions/download-artifact@v4
        with:
          name: VorbisPluginAndroidArtifacts
          path: out/Plugins/Android

      - name: Download artifacts macos
        uses: actions/download-artifact@v4
        with:
          name: VorbisPluginMacOSArtifacts
          path: out/Plugins/Darwin

      - name: Download artifacts ios
        uses: actions/download-artifact@v4
        with:
          name: VorbisPluginIOSArtifacts
          path: out/Plugins/iOS

      - name: Download artifacts linux
        uses: actions/download-artifact@v4
        with:
          name: VorbisPluginLinuxArtifacts
          path: out/Plugins/Linux

      - name: Download artifacts webgl
        uses: actions/download-artifact@v4
        with:
          name: VorbisPluginWebGLArtifacts
          path: out/Plugins/WebGL

      - name: Commit and push native libraries
        env:
          MY_SECRET: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
        run: |
          set -euxo pipefail
          shopt -s globstar nullglob

          PROJECT_PLUGINS_DIR="unity/unity-project-vorbis/UnityClient/Assets/VorbisPlugin/Plugins"
          mkdir -p \
            "$PROJECT_PLUGINS_DIR/Windows/x86" \
            "$PROJECT_PLUGINS_DIR/Windows/x86_64" \
            "$PROJECT_PLUGINS_DIR/Android/libs/arm64-v8a" \
            "$PROJECT_PLUGINS_DIR/Android/libs/armeabi-v7a" \
            "$PROJECT_PLUGINS_DIR/Android/libs/x86" \
            "$PROJECT_PLUGINS_DIR/Android/libs/x86_64" \
            "$PROJECT_PLUGINS_DIR/OSX" \
            "$PROJECT_PLUGINS_DIR/iOS" \
            "$PROJECT_PLUGINS_DIR/Linux/x86_64" \
            "$PROJECT_PLUGINS_DIR/WebGL"

          WINDOWS_X86=$(find out/Plugins/Windows -type f -name VorbisPlugin.dll -path "*x86/VorbisPlugin.dll" | head -n1)
          WINDOWS_X64=$(find out/Plugins/Windows -type f -name VorbisPlugin.dll -path "*x86_64/VorbisPlugin.dll" | head -n1)
          cp -f "$WINDOWS_X86" "$PROJECT_PLUGINS_DIR/Windows/x86/VorbisPlugin.dll"
          cp -f "$WINDOWS_X64" "$PROJECT_PLUGINS_DIR/Windows/x86_64/VorbisPlugin.dll"

          for arch in arm64-v8a armeabi-v7a x86 x86_64; do
            SRC=$(find out/Plugins/Android -type f -name libVorbisPlugin.so -path "*${arch}/libVorbisPlugin.so" | head -n1)
            cp -f "$SRC" "$PROJECT_PLUGINS_DIR/Android/libs/${arch}/libVorbisPlugin.so"
          done

          MAC_DYLIB=$(find out/Plugins/Darwin -type f -name libVorbisPlugin.dylib -not -path "*arm64*" -not -path "*x86_64*" | head -n1)
          if [ -z "$MAC_DYLIB" ]; then
            MAC_DYLIB=$(find out/Plugins/Darwin -type f -name libVorbisPlugin.dylib | head -n1)
          fi
          cp -f "$MAC_DYLIB" "$PROJECT_PLUGINS_DIR/OSX/libVorbisPlugin.dylib"

          for lib in libVorbisPlugin.a libvorbis.a libvorbisfile.a libvorbisenc.a libogg.a; do
            SRC=$(find out/Plugins/iOS -type f -name "$lib" | head -n1)
            cp -f "$SRC" "$PROJECT_PLUGINS_DIR/iOS/$lib"
          done

          for lib in libVorbisPlugin.a libvorbis.a libvorbisfile.a libvorbisenc.a libogg.a; do
            SRC=$(find out/Plugins/WebGL -type f -name "$lib" | head -n1)
            cp -f "$SRC" "$PROJECT_PLUGINS_DIR/WebGL/$lib"
          done

          LINUX_SO=$(find out/Plugins/Linux -type f -name libVorbisPlugin.so | head -n1)
          cp -f "$LINUX_SO" "$PROJECT_PLUGINS_DIR/Linux/x86_64/libVorbisPlugin.so"
          git add .
          git status
          git config --global user.email "konstantin.gindemit@gmail.com"
          git config --global user.name "Konstantin Gindemit"
          git remote -v
          git commit --allow-empty -m "New native libraries version: 0.5.0-dev.${{ github.run_number }}"
          git tag -a 0.5.0-dev.${{ github.run_number }} -m "New native libraries version: 0.5.0-dev.${{ github.run_number }}"
          git config -l | grep 'http\..*\.extraheader' | cut -d= -f1 | xargs -L1 git config --unset-all
          echo "Trying to push..."
          git push --set-upstream https://token:$MY_SECRET@github.com/gindemit/unity-wrapper-vorbis.git
          git push --tags --set-upstream https://token:$MY_SECRET@github.com/gindemit/unity-wrapper-vorbis.git
